% Assignment 2
%
% Daniel Griffin
% Oltutobi Akomolede
% Jeff Nainaparampil


bins_of_attributes = {};

for i = 1:4
    bins_of_attributes{1, length(bins_of_attributes) + 1} = get_attribute_bins(Data, i, 5);
end

%%% Find S
% Generate 100 elements for the training and 50 for testing
training_set_indicies = [datasample(1:50, 33, 'Replace', false) datasample(51:100, 33, 'Replace', false) datasample(101:150, 33, 'Replace', false)];
testing_set_indices = setdiff(1:150, training_set_indicies);

%  Find_S for Setosa
h_s_setosa = find_s(Data(training_set_indicies, :), 1, 5, bins_of_attributes);

%  Find_S for Versicolor
h_s_versicolor = find_s(Data(training_set_indicies, :), 2, 5, bins_of_attributes);

%  Find_S for Virginica first
h_s_virginica = find_s(Data(training_set_indicies, :), 3, 5, bins_of_attributes);

% Classify an example in Setosa and not Setosa
classify_example(h_s_setosa, Data(training_set_indicies(1), 1:4)) % setosa
classify_example(h_s_setosa, Data(training_set_indicies(34), 1:4)) % versicolor

% Classify an example for Versicolor
classify_example(h_s_versicolor, Data(training_set_indicies(67), 1:4)) % versicolor

% Classify an example for Virginica
classify_example(h_s_virginica, [7.3, 2.9, 6.3, 1.8])

% Check the testing set for find_s
find_s_c_set = {};
find_s_c_ver = {};
find_s_c_vir = {};

index = 1;
for i = testing_set_indices
    find_s_c_set{index} = [classify_example(h_s_setosa, Data(i, 1:4)), Data(i, 5) == 1];
    find_s_c_ver{1, index} = [classify_example(h_s_versicolor, Data(i, 1:4)), Data(i, 5)];
    find_s_c_vir{1, index} = [classify_example(h_s_virginica, Data(i, 1:4)), Data(i, 5)];
    index = index + 1;
end


%%% Candidate Elimination
[h_s_setosa, h_g_setosa] = candidate_eliminiation(Data(training_set_indicies, :), 1, 5, bins_of_attributes);
[h_s_versicolor, h_g_versicolor] = candidate_eliminiation(Data(training_set_indicies, :), 2, 5, bins_of_attributes);
[h_s_virginica, h_g_virginica] = candidate_eliminiation(Data(training_set_indicies, :), 3, 5, bins_of_attributes);

% Testing the candidate elimination with the test set
ce_c_set = {};
ce_c_ver = {};
ce_c_vir = {};

index = 1;
for i = testing_set_indices
    % Check to see if it's true for the specific hypothesis and true for at
    % least one of the general hypotheses. Then, True.  Otherwise, False.
    ce_c_set{1, index} = [classify_for_candidate_elimination(h_s_setosa, h_g_setosa, Data(i, 1:4)), Data(i, 5)];
    ce_c_ver{1, index} = [classify_for_candidate_elimination(h_s_versicolor, h_g_versicolor, Data(i, 1:4)), Data(i, 5)];
    ce_c_vir{1, index} = [classify_for_candidate_elimination(h_s_virginica, h_g_virginica, Data(i, 1:4)), Data(i, 5)];
    
    index = index + 1;
end

%%% List-then-Eliminate
[h_setosa, nodes_visited] = list_then_eliminate(Data(training_set_indicies, :), 1, 5, bins_of_attributes);
[h_versicolor, nodes_visited] = list_then_eliminate(Data(training_set_indicies, :), 2, 5, bins_of_attributes);
[h_virginica, nodes_visited] = list_then_eliminate(Data(training_set_indicies, :), 3, 5, bins_of_attributes);

% Testing
lte_c_set = {};
lte_c_ver = {};
lte_c_vir = {};

index = 1;
for i = testing_set_indices
    % Check to see if it's true for at least one hypothesis.
    lte_c_set{1, index} = [classify_for_hypot_list(h_setosa, Data(i, 1:4)), Data(i, 5)];
    lte_c_ver{1, index} = [classify_for_hypot_list(h_versicolor, Data(i, 1:4)), Data(i, 5)];
    lte_c_vir{1, index} = [classify_for_hypot_list(h_virginica, Data(i, 1:4)), Data(i, 5)];
    
    index = index + 1;
end


find_s_c_set
find_s_c_ver
find_s_c_vir
ce_c_set
ce_c_ver
ce_c_vir
lte_c_set
lte_c_ver
lte_c_vir
